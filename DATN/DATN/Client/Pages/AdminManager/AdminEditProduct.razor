@page "/admin/editproduct/{ProductId:int}"
@using DATN.Shared
@layout LayoutAdmin
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject LocalStorageService _localStorageService
@inject IJSRuntime JS

<div class="container-fluid p-5 bg-secondary mt-3" style="height: 900px;">
    <div class="col-md-12">
        <div class="card shadow-sm bg-white">
            <div class="text-black">
                <h5 class="m-3 p-4 fs-2 text-black">Chỉnh Sửa Sản Phẩm</h5>
            </div>
            <div class="card-body col-md-12 m-auto">
                @if (isLoaded)
                {
                    <EditForm Model="@prod" OnValidSubmit="EditProd" Context="editFormContext">
                        <DataAnnotationsValidator />
                        <div class="text-danger mb-3">
                            <ValidationSummary />
                        </div>

                        <div class="row text-black m-auto">
                            <div class="form-group col-md-6 mb-3">
                                <label for="UnitId" class="control-label"><strong>UnitId</strong></label>
                                <select id="UnitId" @bind="prod.UnitId" class="form-control text-white">
                                    <option value="">Chọn UnitId</option>
                                    @if (listunit != null && listunit.Any())
                                    {
                                        @foreach (var unit in listunit)
                                        {
                                            <option value="@unit.UnitId">@unit.UnitName</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => prod.UnitId)" />
                            </div>

                            <div class="form-group col-md-6 mb-3">
                                <label for="ProductName" class="control-label"><strong>Product Name</strong></label>
                                <input id="ProductName" @bind="prod.ProductName" class="form-control p-3 text-white" placeholder="Product Name" required />
                                <ValidationMessage For="@(() => prod.ProductName)" />
                            </div>
                        </div>

                        <div class="row text-black m-auto">
                            <div class="form-group col-md-6 mb-3">
                                <label for="Price" class="control-label"><strong>Price</strong></label>
                                <input type="number" id="Price" @bind="prod.Price" class="form-control p-3 text-white" placeholder="Price" required />
                                <ValidationMessage For="@(() => prod.Price)" />
                            </div>

                            <div class="form-group col-md-6 mb-3">
                                <label for="CategoryId" class="control-label"><strong>CategoryId</strong></label>
                                <select id="CategoryId" @bind="prod.CategoryId" class="form-control text-white">
                                    <option value="">Chọn CategoryId</option>
                                    @if (listcategory != null && listcategory.Any())
                                    {
                                        @foreach (var category in listcategory)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => prod.UnitId)" />
                            </div>
                        </div>

                        <div class="form-group col-md-3 p-3">
                            <label for="ProductImage" class="control-label"><strong>Choose Image</strong></label>
                            <InputFile OnChange="HandleFileSelected" class="" />
                            <ValidationMessage For="@(() => prod.ProductImage)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="ProductDescription" class="control-label"><strong>Product Description</strong></label>
                            <textarea id="ProductDescription" @bind="prod.ProductDescription" class="form-control p-3 text-white" placeholder="Enter product description" style="height: 200px;"></textarea>
                            <ValidationMessage For="@(() => prod.ProductDescription)" />
                        </div>


                        <div class="form-group text-center mt-3">
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-danger mx-2">Sửa</button>
                                <a href="admin/adminproduct" class="btn btn-secondary mx-2">Trở Về</a>
                            </div>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3 text-center">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 text-center">
                            @errorMessage
                        </div>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ProductId { get; set; }

    private string errorMessage;
    private string successMessage;
    private DATN.Shared.Product prod = new DATN.Shared.Product();
    private List<DATN.Shared.Unit> listunit = new List<DATN.Shared.Unit>();
    private List<DATN.Shared.Category> listcategory = new List<DATN.Shared.Category>();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEditProduct();
        isLoaded = true;
    }


    private async Task LoadEditProduct()
    {
        try
        {
            listunit = await httpClient.GetFromJsonAsync<List<DATN.Shared.Unit>>("api/Unit/GetUnit");
            listcategory = await httpClient.GetFromJsonAsync<List<DATN.Shared.Category>>("api/Category/GetCategories");
            var response = await httpClient.GetFromJsonAsync<Product>($"api/Product/{ProductId}");
            if (response != null)
            {
                prod = response;
            }
            else
            {
                errorMessage = "Không tìm thấy món ăn.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task EditProd()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/Product/{ProductId}", prod);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Cập nhật thành công!";
                errorMessage = string.Empty;
                await JS.InvokeVoidAsync("showAlert", "success", "Thành Công");
                Navigation.NavigateTo("/admin/adminproduct");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi khi cập nhật món ăn: {errorContent}";
                await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
            await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
        }

        StateHasChanged();
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                prod.ProductImage = buffer;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading file: {ex.Message}";
        }
    }
}
