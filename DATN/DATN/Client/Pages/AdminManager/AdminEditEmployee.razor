@page "/admin/editemployee/{employeeId:int}"
@using DATN.Shared
@layout LayoutAdmin
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject LocalStorageService _localStorageService
@inject IJSRuntime JS


<div class="container-fluid p-5 bg-secondary mt-3" style="height: 900px;">
    <div class="col-md-6 m-auto">
        <div class="card shadow-sm bg-white">
            <div class="text-black">
                <h5 class="m-3 p-4 fs-2 text-black">Chỉnh Sửa Nhân Viên</h5>
            </div>
            <div class="card-body col-md-12 m-auto">
                @if (isLoaded)
                {
                    <EditForm Model="@employee" OnValidSubmit="EditEmployee">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group col-md-12 mb-3">
                            <label for="EmployeeName" class="control-label"><strong>EmployeeName</strong></label>
                            <input id="EmployeeName" @bind="employee.EmployeeName" class="form-control" placeholder="EmployeeName" required />
                            <ValidationMessage For="@(() => employee.EmployeeName)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="Address" class="control-label"><strong>Address</strong></label>
                            <input id="Address" @bind="employee.Address" class="form-control" placeholder="Address" required />
                            <ValidationMessage For="@(() => employee.Address)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="PhoneNumber" class="control-label"><strong>PhoneNumber</strong></label>
                            <input type="number" id="PhoneNumber" @bind="employee.PhoneNumber" class="form-control" placeholder="PhoneNumber" required />
                            <ValidationMessage For="@(() => employee.PhoneNumber)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="Email" class="control-label"><strong>Email</strong></label>
                            <input type="email" id="Email" @bind="employee.Email" class="form-control" placeholder="Email" required />
                            <ValidationMessage For="@(() => employee.Email)" />
                        </div>


                        <div class="form-group col-md-12 mb-3">
                            <label for="Position" class="control-label"><strong>Position</strong></label>
                            <input id="Position" @bind="employee.Position" class="form-control" placeholder="Position" required />
                            <ValidationMessage For="@(() => employee.Position)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="HireDate" class="control-label"><strong>HireDate</strong></label>
                            <input type="date" id="HireDate" @bind="employee.HireDate" class="form-control" placeholder="HireDate" required />
                            <ValidationMessage For="@(() => employee.HireDate)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="TotalRewardPoint" class="control-label"><strong>Salary</strong></label>
                            <input type="number" id="TotalRewardPoint" @bind="employee.Salary" class="form-control" placeholder="Salary" required />
                            <ValidationMessage For="@(() => employee.Salary)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="AccountId" class="control-label"><strong>AccountId</strong></label>
                            <select id="AccountId" @bind="employee.AccountId" class="form-control">
                                <option value="">Chọn Account</option>
                                @if (accounts != null && accounts.Any())
                                {
                                    @foreach (var account in accounts)
                                    {
                                        <option value="@account.AccountId">@account.Email</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => employee.AccountId)" />
                        </div>

                        <div class="form-group text-center mt-3">
                            <button type="submit" class="btn btn-danger mx-2">Sửa</button>
                            <a href="/adminemployee" class="btn btn-secondary mx-2">Trở Về</a>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3 text-center">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 text-center">
                            @errorMessage
                        </div>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter] public int employeeId { get; set; }

    private string errorMessage;
    private string successMessage;
    private DATN.Shared.Employee employee = new DATN.Shared.Employee();
    private List<DATN.Shared.Account> accounts = new List<DATN.Shared.Account>();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEditEmployee();
        await LoadAccounts();
        isLoaded = true;
    }

    private async Task LoadAccounts()
    {
        try
        {
            var responseaccount = await httpClient.GetFromJsonAsync<List<Account>>("api/Account/GetAccount");

            if (responseaccount != null)
            {
                accounts = responseaccount.Where(a => a.AccountType == "Employee").ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi khi lấy danh sách tài khoản: {ex.Message}";
        }
    }

    private async Task LoadEditEmployee()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<Employee>($"api/Employee/{employeeId}");
            if (response != null)
            {
                employee = response;
            }
            else
            {
                errorMessage = "Không tìm thấy danh mục.";
                await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
        }
    }

    private async Task EditEmployee()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/Employee/{employeeId}", employee);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Cập nhật thành công!";
                errorMessage = string.Empty;
                await JS.InvokeVoidAsync("showAlert", "success", "Thành Công");
                Navigation.NavigateTo("/admin/adminemployee");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi khi cập nhật danh mục: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
        }

        StateHasChanged();
    }
}
