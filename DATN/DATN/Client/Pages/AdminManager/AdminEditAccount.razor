@page "/editaccount/{AccountId:int}"
@using DATN.Shared
@layout LayoutAdmin
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject LocalStorageService _localStorageService
@inject IJSRuntime JS

<div class="row justify-content-center mt-3 p-5">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-danger text-white">
                <h5 class="text-center mb-0">Edit Account</h5>
            </div>
            <div class="card-body">
                @if (isLoaded)
                {
                    <EditForm Model="@account" OnValidSubmit="EditAccount" Context="editFormContext">
                        <DataAnnotationsValidator />
                        <div class="text-danger mb-3">
                            <ValidationSummary />
                        </div>

                        <div class="form-group">
                            <label for="AccountType" class="control-label"><strong>AccountType</strong></label>
                            <input id="AccountType" @bind="account.AccountType" class="form-control" placeholder="AccountType" />
                            <ValidationMessage For="@(() => account.AccountType)" />
                        </div>

                        <div class="form-group">
                            <label for="CreateDate" class="control-label"><strong>CreateDate</strong></label>
                            <input type="date" id="CreateDate" @bind="account.CreateDate" class="form-control" placeholder="CreateDate" required />
                            <ValidationMessage For="@(() => account.CreateDate)" />
                        </div>

                        <div class="form-group">
                            <label for="Email" class="control-label"><strong>Email</strong></label>
                            <input type="email" id="Email" @bind="account.Email" class="form-control" placeholder="Email" />
                            <ValidationMessage For="@(() => account.Email)" />
                        </div>

                        <div class="form-group text-center">
                            <div class="d-flex justify-content-center">
                                <button type="submit" class="btn btn-danger mx-2">Update</button>
                                <a href="/adminaccount" class="btn btn-secondary mx-2">Back</a>
                            </div>
                        </div>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int AccountId { get; set; }

    private string errorMessage;
    private string successMessage;
    private DATN.Shared.Account account = new DATN.Shared.Account();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEditAccount();
        isLoaded = true;
    }

    private async Task LoadEditAccount()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<Account>($"api/Account/{AccountId}");
            if (response != null)
            {
                account = response;
            }
            else
            {
                errorMessage = "Not found account";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task EditAccount()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/Account/{AccountId}", account);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Cập nhật thành công!";
                errorMessage = string.Empty;
                await JS.InvokeVoidAsync("showAlert", "success", "Thành Công");
                Navigation.NavigateTo("/adminaccount");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi khi cập nhật account: {errorContent}";
                await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
            await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
        }

        StateHasChanged();
    }
}
