@page "/createrewardpointe"
@using DATN.Shared
@layout LayoutAdmin
@inject HttpClient httpClient
@inject NavigationManager Navigation

<div class="row justify-content-center mt-3 p-5">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-danger text-white">
                <h5 class="text-center mb-0">Thêm DANH MỤC</h5>
            </div>
            <div class="card-body">
                @if (isLoaded)
                {
                    <EditForm Model="@rewardpointe" OnValidSubmit="CreateRewardPointe" Context="editFormContext">
                    <DataAnnotationsValidator />
                    <div class="text-danger mb-3">
                        <ValidationSummary />
                        </div>

                        <div class="form-group">
                        <label for="CustomerId" class="control-label"><strong>CustomerId</strong></label>
                        <input id="CustomerId" @bind="rewardpointe.CustomerId" class="form-control" placeholder="CustomerId" />
                        <ValidationMessage For="@(() => rewardpointe.CustomerId)" />
                        </div>

                        <div class="form-group">
                        <label for="RewardPoint" class="control-label"><strong>RewardPoints</strong></label>
                        <input type="number" id="RewardPoint" @bind="rewardpointe.RewardPoint" class="form-control" placeholder="RewardPoints" />
                        <ValidationMessage For="@(() => rewardpointe.RewardPoint)" />
                        </div>

                        <div class="form-group">
                        <label for="UpdateDate" class="control-label"><strong>UpdateDate</strong></label>
                        <input type="date" id="UpdateDate" @bind="rewardpointe.UpdateDate" class="form-control" placeholder="UpdateDate" />
                        <ValidationMessage For="@(() => rewardpointe.UpdateDate)" />
                        </div>

                        <div class="form-group">
                        <label for="OrderId" class="control-label"><strong>OrderId</strong></label>
                        <input id="OrderId" @bind="rewardpointe.OrderId" class="form-control" placeholder="OrderId" />
                        <ValidationMessage For="@(() => rewardpointe.OrderId)" />
                        </div>


                        <div class="form-group text-center">
                        <div class="d-flex justify-content-center">
                        <button type="submit" class="btn btn-danger mx-2">Lưu thông tin</button>
                        <a class="btn btn-secondary mx-2" data-bs-target="#carouselExample" data-bs-slide="prev">quay về</a>
                        </div>
                    </div>
                </EditForm>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string errorMessage;
    private string successMessage;
    private DATN.Shared.RewardPointe rewardpointe = new DATN.Shared.RewardPointe();
    private IBrowserFile selectedFile;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync() => isLoaded = true;

    private async Task CreateRewardPointe()
    {
        try
        {
            var responseRewardPointe = await httpClient.PostAsJsonAsync("api/RewardPointe/AddRewardPointe", rewardpointe);

            if (responseRewardPointe.IsSuccessStatusCode)
            {
                successMessage = "Thêm thành công!";
                errorMessage = string.Empty;
                Navigation.NavigateTo("/adminaccount");
            }
            else
            {
                var errorContent = await responseRewardPointe.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi khi thêm danh mục: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
        }

        StateHasChanged();

    }


}
