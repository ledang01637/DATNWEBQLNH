
@page "/editshifte/{ShifteId:int}"
@using DATN.Shared
@layout LayoutAdmin
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject LocalStorageService _localStorageService
@inject IJSRuntime JS

<div class="container-fluid p-5 bg-secondary mt-3" style="height: 900px;">
    <div class="col-md-6 m-auto">
        <div class="card shadow-sm bg-white">
            <div class="text-black">
                <h5 class="m-3 p-4 fs-2 text-black">Edit Shifte</h5>
            </div>
            <div class="card-body col-md-12 m-auto">
                @if (isLoaded)
                {
                    <EditForm Model="@shifte" OnValidSubmit="EditShifte" Context="editFormContext">
                        <DataAnnotationsValidator />
                        <div class="text-danger mb-3">
                            <ValidationSummary />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="Shifte_Name" class="control-label"><strong>Shifte_Name</strong></label>
                            <input id="Shifte_Name" @bind="shifte.ShifteName" class="form-control" placeholder="Shifte_Name" required />
                            <ValidationMessage For="@(() => shifte.ShifteName)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="StartTime" class="control-label"><strong>StartTime</strong></label>
                            <input id="StartTime" type="time" @bind="shifte.StartTime" class="form-control" placeholder="StartTime" required />
                            <ValidationMessage For="@(() => shifte.StartTime)" />
                        </div>

                        <div class="form-group col-md-12 mb-3">
                            <label for="EndTime" class="control-label"><strong>EndTime</strong></label>
                            <input id="EndTime" type="time" @bind="shifte.EndTime" class="form-control" placeholder="EndTime" required />
                            <ValidationMessage For="@(() => shifte.EndTime)" />
                        </div>


                        <div class="form-group text-center mt-3">
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-danger mx-2">Add</button>
                                <a href="/adminshifte" class="btn btn-secondary mx-2">Back</a>
                            </div>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3 text-center">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 text-center">
                            @errorMessage
                        </div>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ShifteId { get; set; }

    private string errorMessage;
    private string successMessage;
    private DATN.Shared.Shifte shifte = new DATN.Shared.Shifte();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEditShifte();
        isLoaded = true;
    }

    private async Task LoadEditShifte()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<Shifte>($"api/Shifte/{ShifteId}");
            if (response != null)
            {
                shifte = response;
            }
            else
            {
                errorMessage = "Không tìm thấy món ăn.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task EditShifte()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/Shifte/{ShifteId}", shifte);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Cập nhật thành công!";
                errorMessage = string.Empty;
                await JS.InvokeVoidAsync("showAlert", "success", "Thành Công");
                Navigation.NavigateTo("/adminshifte");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi khi cập nhật món ăn: {errorContent}";
                await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
            successMessage = string.Empty;
            await JS.InvokeVoidAsync("showAlert", "error", "Lỗi", "Thất Bại");
        }

        StateHasChanged();
    }
}
