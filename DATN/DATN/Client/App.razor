@inject AuthenticationStateProvider AuthenticationStateProvider

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <CascadingAuthenticationState>
            @if (IsLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                @if (IsAdmin)
                {
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(LayoutAdmin)" />
                }
                else
                {
                    Console.WriteLine("2");
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                }
            }
        </CascadingAuthenticationState>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="container-fluid access-denied-container">
                    <div class="access-denied-card">
                        <h1>404</h1>
                        <p><strong>Not Found</strong></p>
                        <p>This page not found</p>
                        <a href="/" class="btn btn-primary mt-3">Go to Homepage</a>
                    </div>
                </div>
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>
@code {
    private bool IsAdmin { get; set; }
    private bool IsLoading { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.Identity.IsAuthenticated && (user.IsInRole("3") || user.IsInRole("1") || user.IsInRole("2"));
        IsLoading = false;
    }
}